version: "3.9"

services:
  database:
    platform: linux/x86_64
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./:/app/
    environment:
      MYSQL_DATABASE: demo
      MYSQL_USER: user
      MYSQL_PASSWORD: user
      MYSQL_ROOT_PASSWORD: user
    networks:
      - internal

  rabbitmq-container:
    image: rabbitmq:3.11-management
    hostname: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "user"
    networks:
      - internal

  app:
    container_name: demo
    command: java -jar target/demo-0.0.1-SNAPSHOT.jar
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - database
      - rabbitmq-container
    volumes:
      - ./:/app/app
    links:
      - database
    networks:
      - internal
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/demo?useSSL=false&allowPublicKeyRetrieval=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      - spring_rabbitmq_host=rabbitmq-container
      - spring_rabbitmq_port=5672

  ui:
    container_name: react_frontend
    build:
      context: ./src/ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src/ui/src:/app/src
    environment:
      - WATCHPACK_POLLING=true

  sso:
    image: quay.io/keycloak/keycloak:22.0.3
    container_name: keycloak
    ports:
      - "8081:8081"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
      - --http-port=8081

networks:
  internal:
    name: internal